(in-package #:value-semantics-utils/test)

(defun dict-equal (x y) (a:set-equal x y :test #'equal))

(define-test dict-test
  (let ((dict-1 (make-instance 'vs:dict :test 'vs:eqv)))
    (is eq '() (vs:dict-contents dict-1))
    (is eq #'vs:eqv (vs:dict-test dict-1))
    (let ((dict-2 (vs:dict-insert dict-1 42 24))
          (dict-3 (vs:dict-insert dict-1 42 24)))
      (isnt eq dict-1 dict-2)
      (isnt eq dict-2 dict-3)
      (multiple-value-bind (value foundp) (vs:dict-find dict-2 42)
        (is vs:eqv 24 value)
        (true foundp))
      (multiple-value-bind (value foundp) (vs:dict-find dict-2 24)
        (false value)
        (false foundp))
      (is vs:eqv dict-2 dict-3)
      (is vs:eqv '((42 . 24)) (vs:dict-contents dict-2))
      (let ((dict-4 (vs:dict-insert dict-2 24 42)))
        (is dict-equal '((42 . 24) (24 . 42)) (vs:dict-contents dict-4))
        (let ((dict-5 (vs:dict-remove dict-4 24)))
          (is vs:eqv dict-5 dict-2)))
      (let ((dict-6 (vs:copy dict-2)))
        (is vs:eqv '((42 . 24)) (vs:dict-contents dict-6))))))

(define-test dict-test-duplication
  (let ((dict (make-instance 'vs:dict :test 'vs:eqv
                                      :contents '((1 . 2) (1 . 3) (1 . 4)))))
    (is = 1 (vs:dict-count dict))
    (let ((element (cdr (first (vs:dict-contents dict)))))
      (is member element '(2 3 4))))
  (let* ((set (make-instance 'vs:set :test 'vs:eqv
                                     :contents '((1 . 2) (1 . 3) (1 . 4))))
         (dict (make-instance 'vs:dict :set set)))
    (is = 1 (vs:dict-count dict))
    (let ((element (cdr (first (vs:dict-contents dict)))))
      (is member element '(2 3 4)))))

(define-test dict-operations
  (let ((dict-1 (vs:dict 1 2 3 4))
        (dict-2 (vs:dict 3 4 5 6)))
    (let ((result (vs:dict-contents (vs:dict-difference dict-1 dict-2))))
      (is dict-equal '((1 . 2)) result))
    (let ((result (vs:dict-contents (vs:dict-difference dict-2 dict-1))))
      (is dict-equal '((5 . 6)) result))
    (let ((result (vs:dict-contents (vs:dict-union dict-1 dict-2))))
      (is dict-equal '((1 . 2) (3 . 4) (5 . 6)) result))
    (let ((result (vs:dict-contents (vs:dict-intersection dict-1 dict-2))))
      (is dict-equal '((3 . 4)) result))
    (let ((result (vs:dict-contents (vs:dict-exclusive-or dict-1 dict-2))))
      (is dict-equal '((1 . 2) (5 . 6)) result))))
